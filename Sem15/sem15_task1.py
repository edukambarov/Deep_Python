# Задание №1
# Напишите программу, которая использует модуль logging для
# вывода сообщения об ошибке в файл.
# Например отлавливаем ошибку деления на ноль.

# По умолчанию логгер имеет следующие уровни журналирования
# ● NOTSET, 0 — уровень не установлен. Регистрируются все события.
# ● DEBUG, 10 — подробная информация, обычно представляющая интерес
# только при диагностике проблем.
# ● INFO, 20 — подтверждение того, что все работает так, как ожидалось.
# ● WARNING, 30 — указание на то, что произошло что-то неожиданное, или
# указание на какую-то проблему в ближайшем будущем (например,
# «недостаточно места на диске»). Программное обеспечение по-прежнему
# работает, как ожидалось.
# ● ERROR, 40 — из-за более серьезной проблемы программное обеспечение не
# может выполнять некоторые функции.
# ● CRITICAL, 50 — серьезная ошибка, указывающая на то, что сама программа не
# может продолжать работу.

import logging



def log_to_file(file_name: str, error_msg: str):
    logging.basicConfig(filename=file_name,
                        filemode='a+',
                        format='{asctime}: {levelname}\n'
    '{funcName} >> in line {lineno}: {msg}',
                        style='{',
                        level=logging.ERROR,
                        encoding='utf-8')



def division (a: int | float, b: int | float):
    try:
        return a / b
    except ZeroDivisionError as e:
        log_to_file('sem15_task1.log', str(e))



if __name__ == '__main__':
    division(50, 0)